-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- 1. Users table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('admin', 'scanner', 'buyer')),
    password_hash TEXT, -- Only if not using social login
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Events table
CREATE TABLE events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT NOT NULL,
    description TEXT,
    date DATE NOT NULL,
    time TIME,
    location TEXT
    image_url TEXT,
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Ticket Types table
CREATE TABLE ticket_types (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    event_id UUID NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL CHECK (price >= 0),
    total_quantity INTEGER NOT NULL CHECK (total_quantity > 0),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. Tickets table
CREATE TABLE tickets (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ticket_type_id UUID NOT NULL REFERENCES ticket_types(id),
    purchaser_id UUID NOT NULL REFERENCES users(id),
    event_id UUID NOT NULL REFERENCES events(id),
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'paid', 'validated')),
    scanned_at TIMESTAMP WITH TIME ZONE,
    qr_code TEXT UNIQUE NOT NULL,
    purchased_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    price_paid DECIMAL(10,2) NOT NULL CHECK (price_paid >= 0)
);

-- 5. Attendees table (optional)
CREATE TABLE attendees (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ticket_id UUID NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    email TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 6. Scans table
CREATE TABLE scans (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ticket_id UUID NOT NULL REFERENCES tickets(id),
    scanned_by UUID NOT NULL REFERENCES users(id),
    scanned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    status TEXT NOT NULL CHECK (status IN ('valid', 'used', 'invalid'))
);

-- 7. Event Stats view
CREATE OR REPLACE VIEW event_stats AS
SELECT 
    e.id as event_id,
    e.title as event_title,
    COUNT(t.id) as total_tickets_sold,
    COALESCE(SUM(t.price_paid), 0) as total_income,
    COUNT(CASE WHEN t.status = 'validated' THEN 1 END) as total_attendees,
    COUNT(CASE WHEN t.status = 'pending' THEN 1 END) as total_pending,
    COUNT(CASE WHEN t.status = 'paid' THEN 1 END) as total_paid
FROM events e
LEFT JOIN tickets t ON e.id = t.event_id
GROUP BY e.id, e.title;

-- Indexes for performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_events_date ON events(date);
CREATE INDEX idx_events_created_by ON events(created_by);
CREATE INDEX idx_ticket_types_event_id ON ticket_types(event_id);
CREATE INDEX idx_tickets_purchaser_id ON tickets(purchaser_id);
CREATE INDEX idx_tickets_event_id ON tickets(event_id);
CREATE INDEX idx_tickets_status ON tickets(status);
CREATE INDEX idx_tickets_qr_code ON tickets(qr_code);
CREATE INDEX idx_attendees_ticket_id ON attendees(ticket_id);
CREATE INDEX idx_scans_ticket_id ON scans(ticket_id);
CREATE INDEX idx_scans_scanned_by ON scans(scanned_by);
CREATE INDEX idx_scans_scanned_at ON scans(scanned_at);

-- Function to generate unique QR codes
CREATE OR REPLACE FUNCTION generate_qr_code()
RETURNS TEXT AS $$
BEGIN
    RETURN 'QR_' || UPPER(REPLACE(uuid_generate_v4()::TEXT, '-', ''));
END;
$$ language 'plpgsql';

-- Trigger to auto-generate QR codes for tickets
CREATE OR REPLACE FUNCTION set_ticket_qr_code()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.qr_code IS NULL OR NEW.qr_code = '' THEN
        NEW.qr_code = generate_qr_code();
    END IF;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER set_ticket_qr_code_trigger 
    BEFORE INSERT ON tickets 
    FOR EACH ROW 
    EXECUTE FUNCTION set_ticket_qr_code();

-- Function to update ticket scanned_at when validated
CREATE OR REPLACE FUNCTION update_ticket_scanned_at()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.status = 'validated' AND OLD.status != 'validated' THEN
        NEW.scanned_at = NOW();
    END IF;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_ticket_scanned_at_trigger
    BEFORE UPDATE ON tickets
    FOR EACH ROW
    EXECUTE FUNCTION update_ticket_scanned_at();

-- Row Level Security (RLS) policies
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE events ENABLE ROW LEVEL SECURITY;
ALTER TABLE ticket_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE tickets ENABLE ROW LEVEL SECURITY;
ALTER TABLE attendees ENABLE ROW LEVEL SECURITY;
ALTER TABLE scans ENABLE ROW LEVEL SECURITY;

-- RLS Policies for different roles

-- Users policies
CREATE POLICY "Users can view own profile" ON users
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON users
    FOR UPDATE USING (auth.uid() = id);

-- Events policies
CREATE POLICY "Anyone can view events" ON events
    FOR SELECT USING (true);

CREATE POLICY "Only admins can create events" ON events
    FOR INSERT WITH CHECK (
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin')
    );

CREATE POLICY "Only admins can update events" ON events
    FOR UPDATE USING (
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin')
    );

-- Ticket types policies
CREATE POLICY "Anyone can view ticket types" ON ticket_types
    FOR SELECT USING (true);

CREATE POLICY "Only admins can manage ticket types" ON ticket_types
    FOR ALL USING (
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin')
    );

-- Tickets policies
CREATE POLICY "Users can view own tickets" ON tickets
    FOR SELECT USING (
        auth.uid() = purchaser_id OR 
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role IN ('admin', 'scanner'))
    );

CREATE POLICY "Buyers can create tickets" ON tickets
    FOR INSERT WITH CHECK (
        auth.uid() = purchaser_id AND 
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role = 'buyer')
    );

CREATE POLICY "Admins and scanners can update tickets" ON tickets
    FOR UPDATE USING (
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role IN ('admin', 'scanner'))
    );

-- Attendees policies
CREATE POLICY "Users can view attendees for their tickets" ON attendees
    FOR SELECT USING (
        EXISTS (SELECT 1 FROM tickets WHERE id = ticket_id AND purchaser_id = auth.uid()) OR
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role IN ('admin', 'scanner'))
    );

CREATE POLICY "Users can manage attendees for their tickets" ON attendees
    FOR ALL USING (
        EXISTS (SELECT 1 FROM tickets WHERE id = ticket_id AND purchaser_id = auth.uid()) OR
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin')
    );

-- Scans policies
CREATE POLICY "Scanners and admins can view scans" ON scans
    FOR SELECT USING (
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role IN ('admin', 'scanner'))
    );

CREATE POLICY "Scanners can create scans" ON scans
    FOR INSERT WITH CHECK (
        auth.uid() = scanned_by AND 
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role IN ('admin', 'scanner'))
    );

-- Helper functions for common queries

-- Function to get available tickets for an event
CREATE OR REPLACE FUNCTION get_available_tickets(event_uuid UUID)
RETURNS TABLE(
    ticket_type_id UUID,
    ticket_type_name TEXT,
    price DECIMAL,
    total_quantity INTEGER,
    sold_quantity BIGINT,
    available_quantity BIGINT
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        tt.id,
        tt.name,
        tt.price,
        tt.total_quantity,
        COUNT(t.id) as sold_quantity,
        (tt.total_quantity - COUNT(t.id)) as available_quantity
    FROM ticket_types tt
    LEFT JOIN tickets t ON tt.id = t.ticket_type_id AND t.status IN ('paid', 'validated')
    WHERE tt.event_id = event_uuid
    GROUP BY tt.id, tt.name, tt.price, tt.total_quantity;
END;
$$ language 'plpgsql';

-- Function to validate a ticket by QR code
CREATE OR REPLACE FUNCTION validate_ticket(qr_code_input TEXT, scanner_id UUID)
RETURNS TABLE(
    ticket_id UUID,
    event_title TEXT,
    attendee_name TEXT,
    status TEXT,
    message TEXT
) AS $$
DECLARE
    ticket_record RECORD;
    event_record RECORD;
    attendee_record RECORD;
BEGIN
    -- Find the ticket
    SELECT * INTO ticket_record FROM tickets WHERE qr_code = qr_code_input;
    
    IF NOT FOUND THEN
        RETURN QUERY SELECT NULL::UUID, ''::TEXT, ''::TEXT, 'invalid'::TEXT, 'Ticket not found'::TEXT;
        RETURN;
    END IF;
    
    -- Get event details
    SELECT * INTO event_record FROM events WHERE id = ticket_record.event_id;
    
    -- Get attendee details (if exists)
    SELECT * INTO attendee_record FROM attendees WHERE ticket_id = ticket_record.id LIMIT 1;
    
    -- Check ticket status
    IF ticket_record.status = 'validated' THEN
        RETURN QUERY SELECT 
            ticket_record.id,
            event_record.title,
            COALESCE(attendee_record.name, ''),
            'used'::TEXT,
            'Ticket already used'::TEXT;
        RETURN;
    END IF;
    
    IF ticket_record.status != 'paid' THEN
        RETURN QUERY SELECT 
            ticket_record.id,
            event_record.title,
            COALESCE(attendee_record.name, ''),
            'invalid'::TEXT,
            'Ticket not paid'::TEXT;
        RETURN;
    END IF;
    
    -- Validate the ticket
    UPDATE tickets SET status = 'validated', scanned_at = NOW() WHERE id = ticket_record.id;
    
    -- Record the scan
    INSERT INTO scans (ticket_id, scanned_by, status) VALUES (ticket_record.id, scanner_id, 'valid');
    
    RETURN QUERY SELECT 
        ticket_record.id,
        event_record.title,
        COALESCE(attendee_record.name, ''),
        'valid'::TEXT,
        'Ticket validated successfully'::TEXT;
END;
$$ language 'plpgsql';

-- Sample data (uncomment to insert test data)
/*
-- Insert sample users
INSERT INTO users (name, email, role) VALUES 
('Admin User', 'admin@example.com', 'admin'),
('Scanner User', 'scanner@example.com', 'scanner'),
('John Buyer', 'john@example.com', 'buyer'),
('Jane Buyer', 'jane@example.com', 'buyer');

-- Insert sample events
INSERT INTO events (title, description, date, time, location, image_url, created_by) VALUES 
('Summer Music Festival', 'Annual outdoor music festival featuring local and international artists', '2024-08-15', '18:00:00', 'Central Park Amphitheater', 'https://example.com/festival.jpg', (SELECT id FROM users WHERE email = 'admin@example.com')),
('Tech Innovation Conference', 'Latest trends in AI, blockchain, and software development', '2024-09-20', '09:00:00', 'Convention Center Hall A', 'https://example.com/tech-conf.jpg', (SELECT id FROM users WHERE email = 'admin@example.com'));

-- Insert sample ticket types
INSERT INTO ticket_types (event_id, name, description, price, total_quantity) VALUES 
((SELECT id FROM events WHERE title = 'Summer Music Festival'), 'General Admission', 'Access to main stage and food area', 75.00, 500),
((SELECT id FROM events WHERE title = 'Summer Music Festival'), 'VIP Pass', 'Premium viewing area, complimentary drinks, exclusive merchandise', 150.00, 100),
((SELECT id FROM events WHERE title = 'Tech Innovation Conference'), 'Standard Pass', 'Access to all sessions and networking lunch', 120.00, 200),
((SELECT id FROM events WHERE title = 'Tech Innovation Conference'), 'Premium Pass', 'All standard benefits plus exclusive workshops and dinner', 250.00, 50);

-- Insert sample tickets
INSERT INTO tickets (ticket_type_id, purchaser_id, event_id, status, price_paid) VALUES 
((SELECT id FROM ticket_types WHERE name = 'General Admission'), (SELECT id FROM users WHERE email = 'john@example.com'), (SELECT id FROM events WHERE title = 'Summer Music Festival'), 'paid', 75.00),
((SELECT id FROM ticket_types WHERE name = 'VIP Pass'), (SELECT id FROM users WHERE email = 'jane@example.com'), (SELECT id FROM events WHERE title = 'Summer Music Festival'), 'paid', 150.00);

-- Insert sample attendees
INSERT INTO attendees (ticket_id, name, email) VALUES 
((SELECT id FROM tickets WHERE purchaser_id = (SELECT id FROM users WHERE email = 'john@example.com') LIMIT 1), 'John Buyer', 'john@example.com'),
((SELECT id FROM tickets WHERE purchaser_id = (SELECT id FROM users WHERE email = 'jane@example.com') LIMIT 1), 'Jane Buyer', 'jane@example.com');
*/